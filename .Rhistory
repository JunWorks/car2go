59+35+66+293+74
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
rm(list=ls())
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
rm(list=ls())
shiny::runApp('C:/Users/Jun/Desktop/KLA_raw')
/var/log/shiny-server.log
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
View(wafer.raw)
View(residual)
View(name.hori)
View(name.vert)
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Downloads')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Downloads')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
if (interactive()) {
# pass a callback function to DataTables using I()
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
)
}
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
column(4, DT::dataTableOutput('posttable'))
source('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw/UI/viewerUI.R')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
install.packages('DT')
install.packages("DT")
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
shiny::runApp('C:/Users/Jun/Dropbox/R_Wafer viewer/KLA_raw')
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
rm(list=ls())
city.info <- data.frame(name = c('austin', 'sandiego', 'berlin', 'milano', 'torino', 'miami'))
car.df <- data.frame()
for (city in city.info$name){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- rbind(car.df, car.df.raw)
}
car.df$fuel <- as.numeric(as.character(car.df$fuel))
write.csv(car.df, file = 'car2go.csv')
map <- get_map(location = 'miami', zoom = 12)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
View(car.df)
car.df[City = 'miami']
car.df[City = 'miami',]
car.df[,City = 'miami']
car.df[City == 'miami']
car.df[car.df$City == 'miami']
car.df[car.df$City == 'miami',]
sum(car.df[car.df$City == 'miami',]$interior != 'GOOD')/nrow(car.df[car.df$City == 'miami',])
for (city in city.info$name){
clean <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
}
clean <- data.frame(City = city.info$name, cleanness)
for (city in city.info$name){
clean[clean$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
}
clean <- data.frame(City = city.info$name, cleanness = NA)
for (city in city.info$name){
clean[clean$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
}
View(clean)
ggplot(data = clean, aes(x=City, y=cleanness, fill=cleaness)) + geom_bar
ggplot(data = clean, aes(x=City, y=cleanness, fill=cleaness)) + geom_bar()
ggplot(data = clean, aes(x=City, y=cleanness, fill=cleanness)) + geom_bar()
ggplot(data = clean, aes(x=City, y=cleanness)) + geom_bar()
View(clean)
ggplot(data = clean, aes(x=City, y=cleanness, fill = City)) + geom_bar()
ggplot(data = clean, aes(x=City, y=cleanness, fill = City)) + geom_bar(stat="identity")
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
jet.colors <-   # function from grDevices package
colorRampPalette(c('#FF00FF',"#00007F", "blue", "#007FFF", "cyan",
"#7FFF7F", "yellow", "#FF7F00", "red"))
colorzjet <<- jet.colors(100)  # 100 separate color
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=colorzjet)
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=heat.colors(1))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=heat.colors(2))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=heat.colors(4))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=heat.colors(5))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=heat.colors(6))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=rainbow(1))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=rainbow(2))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=rainbow(3))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=rainbow(4))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=rainbow(5))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=rainbow(6))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=rainbow(7))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=rainbow(8))
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=heat.colors(3))
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
rm(list=ls())
city.info <- data.frame(name = c('austin', 'sandiego', 'berlin', 'milano', 'torino', 'miami', 'firenze'))
car.df <- data.frame()
for (city in city.info$name){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- rbind(car.df, car.df.raw)
}
car.df$fuel <- as.numeric(as.character(car.df$fuel))
write.csv(car.df, file = 'car2go.csv')
map <- get_map(location = 'miami', zoom = 12)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
clean <- data.frame(City = city.info$name, cleanness = NA)
for (city in city.info$name){
clean[clean$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
}
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=heat.colors(3))
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
rm(list=ls())
city.info <- data.frame(name = c('austin', 'sandiego', 'berlin', 'milano', 'torino', 'miami', 'firenze', 'hamburg'))
car.df <- data.frame()
for (city in city.info$name){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- rbind(car.df, car.df.raw)
}
car.df$fuel <- as.numeric(as.character(car.df$fuel))
write.csv(car.df, file = 'car2go.csv')
map <- get_map(location = 'miami', zoom = 12)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
clean <- data.frame(City = city.info$name, cleanness = NA)
for (city in city.info$name){
clean[clean$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
}
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")+scale_fill_gradientn(name = '', colours=heat.colors(3))
clean <- data.frame(City = city.info$name, cleanness = NA)
for (city in city.info$name){
clean[clean$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
}
ggplot(data = clean, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")
car.status.city <- data.frame(City = city.info$name, cleanness = NA, fuel = NA)
for (city in city.info$name){
car.status.city[car.status.city$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
car.status.city[car.status.city$City == city, ]$fuel <- mean(car.df[car.df$City == city,]$fuel)
}
ggplot(data = clean, aes(x=City, y=cleanness, fill = fuel)) + geom_bar(stat="identity")
View(car.status.city)
ggplot(data = car.status.city, aes(x=City, y=cleanness, fill = fuel)) + geom_bar(stat="identity")
ggplot(data = car.status.city, aes(x=City, y=fuel, fill = fuel)) + geom_bar(stat="identity")
ggplot(data = car.status.city, aes(x=cleanness, y=fuel, color=City)) + geom_point()
View(car.df)
ggplot(data = car.status.city, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")
rm(list=ls())
city.info <- data.frame(name = c('austin', 'sandiego', 'berlin', 'milano', 'torino', 'miami', 'firenze', 'hamburg', 'roma'))
car.df <- data.frame()
for (city in city.info$name){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- rbind(car.df, car.df.raw)
}
car.df$fuel <- as.numeric(as.character(car.df$fuel))
write.csv(car.df, file = 'car2go.csv')
map <- get_map(location = 'miami', zoom = 12)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
car.status.city <- data.frame(City = city.info$name, cleanness = NA, fuel = NA)
for (city in city.info$name){
car.status.city[car.status.city$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
car.status.city[car.status.city$City == city, ]$fuel <- mean(car.df[car.df$City == city,]$fuel)
}
ggplot(data = car.status.city, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")
ggplot(data = car.status.city, aes(x=cleanness, y=fuel, color=City)) + geom_point()
map <- get_map(location = 'roma', zoom = 12)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
rm(list=ls())
library(gridExtra)
library(jsonlite)
library(ggplot2)
library(ggmap)
library(dplyr)
source('decodeLine.R')
setwd("C:/Users/Jun/Dropbox/Data project/car2go")
rm(list=ls())
car.route.sub <- read.csv('Mondayroute.csv', header = T)
get_map(location = 'austin', zoom = 12)
plot1 <- ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'butt') +
geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
map1 <- get_map(location = 'austin', zoom = 12)
plot1 <- ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'butt') +
geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
map1 <- get_map(location = 'austin', zoom = 12)
plot1 <- ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'butt') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
plot1
ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'round') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'round', position = '') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
map1 <- get_map(location = 'austin', zoom = 11)
ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'round', position = '') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'round', position = 'dodge') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
map <- get_map(location = 'austin', zoom = 12)
ggmap(map)+stat_density2d(
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..*2),
size = 2, bins = 5, data = time.df, geom = "polygon") +
scale_fill_gradient(low = "black", high = "red")
aes(x = Lon, y = Lat, fill = ..level.., alpha = ..level..*2),
aes(x = lon, y = lat, fill = ..level.., alpha = ..level..*2),
ggmap(map)+stat_density2d(aes(x = lon, y = lat, fill = ..level.., alpha = ..level..*2),
size = 2, bins = 5, data = car.route.sub, geom = "polygon") +
scale_fill_gradient(low = "black", high = "red")
ggmap(map)+stat_density2d(aes(x = lon, y = lat, fill = log(..level..), alpha = ..level..*2),
size = 2, bins = 5, data = car.route.sub, geom = "polygon") +
scale_fill_gradient(low = "black", high = "red")
ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'round', position = 'stack') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'round', stat = 'bin') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
ggmap(map1) + geom_path(aes(x = lon,  color = name), size = 1, data = car.route.sub, lineend = 'round', stat = 'bin') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
ggmap(map1) + geom_path(aes(x = lon, ), size = 1, data = car.route.sub, lineend = 'round', stat = 'bin') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())
ggmap(map1) + geom_path(aes(x = lon, y = lat, color = name), size = 1, data = car.route.sub, lineend = 'round') +
#geom_point(aes(x = Longitude, y = Latitude, color = name), data = car.app.sub, size =3)+
theme(legend.position="none",axis.title = element_blank())

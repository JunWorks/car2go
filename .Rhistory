ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
map <- get_map(location = 'austin', zoom = 14)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
map <- get_map(location = 'austin', zoom = 14)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
map <- get_map(location = 'austin', zoom = 15)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
map <- get_map(location = 'UT austin', zoom = 15)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
map <- get_map(location = 'UTexas austin', zoom = 15)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
rm(list=ls())
city.info <- data.frame(name = c('austin', 'sandiego', 'berlin', 'milano', 'torino', 'miami', 'firenze', 'hamburg', 'roma', 'amsterdam', 'arlington', 'calgary', 'columbus', 'denver', 'madrid'))
car.df <- data.frame()
for (city in city.info$name){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- rbind(car.df, car.df.raw)
}
car.df$fuel <- as.numeric(as.character(car.df$fuel))
write.csv(car.df, file = 'car2go.csv')
map <- get_map(location = 'UTexas austin', zoom = 15)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
car.status.city <- data.frame(City = city.info$name, cleanness = NA, fuel = NA)
for (city in city.info$name){
car.status.city[car.status.city$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
car.status.city[car.status.city$City == city, ]$fuel <- mean(car.df[car.df$City == city,]$fuel)
}
ggplot(data = car.status.city, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity")
ggplot(data = car.status.city, aes(x=cleanness, y=fuel, color=City)) + geom_point()
ggplot(data = car.status.city, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity") +coord_flip()
View(city.info)
setwd("C:/Users/Jun/Dropbox/Data project/car2go")
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
rm(list=ls())
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- rbind(car.df, car.df.raw)
}
car.df$fuel <- as.numeric(as.character(car.df$fuel))
write.csv(car.df, file = 'car2go.csv')
map <- get_map(location = 'UTexas austin', zoom = 15)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
car.status.city <- data.frame(City = city.info$name, cleanness = NA, fuel = NA)
for (city in city.info$name){
car.status.city[car.status.city$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
car.status.city[car.status.city$City == city, ]$fuel <- mean(car.df[car.df$City == city,]$fuel)
}
ggplot(data = car.status.city, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity") +coord_flip()
ggplot(data = car.status.city, aes(x=cleanness, y=fuel, color=City)) + geom_point()
map <- get_map(location = 'wien', zoom = 11)
ggmap(map)+ geom_point(aes(x = Longitude, y = Latitude, color = fuel, size = 2), data = car.df)+scale_colour_gradient2(low = 'red', high = 'green', midpoint = 60, mid = 'yellow')
car.status.city <- data.frame(City = city.info$City, cleanness = NA, fuel = NA)
for (city in city.info$City){
car.status.city[car.status.city$City == city, ]$cleanness <- 1-sum(car.df[car.df$City == city,]$interior != 'GOOD')/nrow(car.df[car.df$City == city,])
car.status.city[car.status.city$City == city, ]$fuel <- mean(car.df[car.df$City == city,]$fuel)
}
ggplot(data = car.status.city, aes(x=City, y=cleanness, fill = cleanness)) + geom_bar(stat="identity") +coord_flip()
ggplot(data = car.status.city, aes(x=cleanness, y=fuel, color=City)) + geom_point()
ggplot(data = car.status.city ) + geom_point(aes(x=cleanness, y=fuel, color=City, size = 2))
View(city.info)
View(car.status.city)
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
rm(list=ls())
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- rbind(car.df, car.df.raw)
}
car.df$fuel <- as.numeric(as.character(car.df$fuel))
write.csv(car.df, file = 'car2go.csv')
View(car.df)
Sys.time()
paste0(Sys.time(),'car2go.csv')
seq(1,10)
Rscript getData.R
./getData.R
source('getData.R')
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
rm(list=ls())
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- rbind(car.df, car.df.raw)
}
car.df$fuel <- as.numeric(as.character(car.df$fuel))
write.csv(car.df, file = paste0(Sys.time(),' car2go.csv'))
?Sys.time
format(Sys.time(), "%a %b %d %X %Y")
rm(car.df)
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
car.df.time <- data.frame()
for (i in seq(1,10)){
rm(car.df)
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- data.frame(rbind(car.df, car.df.raw), Time <- Sys.time())
}
car.df.time <- rbind(car.df.time, car.df)
}
View(car.df.time)
car.df.time[car.df.time$name == 'CSF 9069',]
?Sys.sleep
library(jsonlite)
library(ggplot2)
library(ggmap)
car.df.time <- data.frame()
for (i in seq(1,2)){
rm(car.df)
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- data.frame(rbind(car.df, car.df.raw), Time <- Sys.time())
}
car.df.time <- rbind(car.df.time, car.df)
Sys.sleep(10)
}
car.df.time[car.df.time$name == 'CSF 9069',]
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
car.df.time <- data.frame()
for (i in seq(1,100)){
rm(car.df)
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- data.frame(rbind(car.df, car.df.raw), Time <- Sys.time())
}
car.df.time <- rbind(car.df.time, car.df)
Sys.sleep(2)
}
View(car.df.time)
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
car.df.time <- data.frame()
for (i in seq(1,100)){
rm(car.df)
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- data.frame(rbind(car.df, car.df.raw), Time <- Sys.time())
}
car.df.time <- rbind(car.df.time, car.df)
Sys.sleep(300)
print(Sys.time())
}
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
car.df.time <- data.frame()
for (i in seq(1,12)){
rm(car.df)
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- data.frame(rbind(car.df, car.df.raw), Time <- Sys.time())
}
car.df.time <- rbind(car.df.time, car.df)
print(Sys.time())
Sys.sleep(300)
}
car.df.time$fuel <- as.numeric(as.character(car.df.time$fuel))
write.csv(car.df.time, file = 'Timedcar2go.csv')
car.df.time[car.df.time$name == 'CSF 9069',]
car.df.time[car.df.time$name == 'FBV 4383',]
car.df.time[car.df.time$name == 'FHB 0201',]
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
car.df.time <- data.frame()
for (i in seq(1,120)){
rm(car.df)
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- data.frame(rbind(car.df, car.df.raw), Time <- Sys.time())
}
car.df.time <- rbind(car.df.time, car.df)
print(Sys.time())
Sys.sleep(300)
}
car.df.time$fuel <- as.numeric(as.character(car.df.time$fuel))
write.csv(car.df.time, file = 'Timedcar2go_1.csv')
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
car.df.time <- data.frame()
for (i in seq(1,288)){
rm(car.df)
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- data.frame(rbind(car.df, car.df.raw), Time <- Sys.time())
}
car.df.time <- rbind(car.df.time, car.df)
print(Sys.time())
Sys.sleep(300)
}
car.df.time$fuel <- as.numeric(as.character(car.df.time$fuel))
write.csv(car.df.time, file = 'Timedcar2go_2.csv')
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
car.df.time <- data.frame()
for (i in seq(1,2880)){
rm(car.df)
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- data.frame(rbind(car.df, car.df.raw), Time <- Sys.time())
}
car.df.time <- rbind(car.df.time, car.df)
print(Sys.time())
Sys.sleep(299)
}
car.df.time$fuel <- as.numeric(as.character(car.df.time$fuel))
write.csv(car.df.time, file = 'Timedcar2go_week.csv')
#include jsonlite
library(jsonlite)
library(ggplot2)
library(ggmap)
for (day in 1:7){
car.df.time <- data.frame()
for (i in seq(1,288)){
rm(car.df)
city.info <- read.csv('cities.csv', header = T)
car.df <- data.frame()
for (city in city.info$City[1]){
car2goURL <- paste('https://www.car2go.com/api/v2.1/vehicles?loc=', city, '&oauth_consumer_key=car2gowebsite&format=json', sep = '' )
#import from JSON
car2goData <- fromJSON(txt = car2goURL)
#identify vehicles having charging attibutes or not
if (length(colnames(car2goData[[1]])) == 10){
# cities with EVs have a charging attribute
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][3]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=12, byrow = F), City = city)[c(-5, -3, -4)]
car.df.raw <- cbind(car.df.raw, coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1:2],colnames(car2goData[[1]])[4:10], 'City', 'Longitude', 'Latitude', 'Altitude')
head(car.df)
} else {
#unlist and save
coord <- data.frame(matrix(unlist(car2goData[[1]][2]), ncol=3, byrow = T))
car.df.raw <- data.frame(matrix(unlist(car2goData[[1]]), ncol=11, byrow = F), City = city)[c(-2, -3, -4)]
car.df.raw <- cbind(car.df.raw[,1], charging = NA, car.df.raw[,2:9], coord)
colnames(car.df.raw) <- c(colnames(car2goData[[1]])[1], 'charging', colnames(car2goData[[1]])[3:9], 'City', 'Longitude', 'Latitude', 'Altitude')
}
car.df <- data.frame(rbind(car.df, car.df.raw), Time <- Sys.time())
}
car.df.time <- rbind(car.df.time, car.df)
print(Sys.time())
Sys.sleep(299)
}
car.df.time$fuel <- as.numeric(as.character(car.df.time$fuel))
write.csv(car.df.time, file = paste(day, 'Timedcar2go_week.csv', sep = ''))
}
